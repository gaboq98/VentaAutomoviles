//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace VentaAutomoviles.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class VentaAutomovilesEntities : DbContext
    {
        public VentaAutomovilesEntities()
            : base("name=VentaAutomovilesEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Abono> Abono { get; set; }
        public virtual DbSet<Automovil> Automovil { get; set; }
        public virtual DbSet<Canton> Canton { get; set; }
        public virtual DbSet<CaracteristicasPorAutomovil> CaracteristicasPorAutomovil { get; set; }
        public virtual DbSet<Cliente> Cliente { get; set; }
        public virtual DbSet<Consignacion> Consignacion { get; set; }
        public virtual DbSet<Credito> Credito { get; set; }
        public virtual DbSet<Despacho> Despacho { get; set; }
        public virtual DbSet<Detalle> Detalle { get; set; }
        public virtual DbSet<DetallePorFactura> DetallePorFactura { get; set; }
        public virtual DbSet<Direccion> Direccion { get; set; }
        public virtual DbSet<Empleado> Empleado { get; set; }
        public virtual DbSet<EmpleadoFabrica> EmpleadoFabrica { get; set; }
        public virtual DbSet<Extra> Extra { get; set; }
        public virtual DbSet<ExtrasPorAutomovil> ExtrasPorAutomovil { get; set; }
        public virtual DbSet<Fabrica> Fabrica { get; set; }
        public virtual DbSet<Factura> Factura { get; set; }
        public virtual DbSet<Fotografia> Fotografia { get; set; }
        public virtual DbSet<FotografiaPorAutomovil> FotografiaPorAutomovil { get; set; }
        public virtual DbSet<Inventario> Inventario { get; set; }
        public virtual DbSet<Marca> Marca { get; set; }
        public virtual DbSet<Modelo> Modelo { get; set; }
        public virtual DbSet<Pago> Pago { get; set; }
        public virtual DbSet<Pais> Pais { get; set; }
        public virtual DbSet<Pedido> Pedido { get; set; }
        public virtual DbSet<Provincia> Provincia { get; set; }
        public virtual DbSet<Sucursal> Sucursal { get; set; }
        public virtual DbSet<TipoAutomovil> TipoAutomovil { get; set; }
        public virtual DbSet<TipoCombustible> TipoCombustible { get; set; }
        public virtual DbSet<TipoEmpleadoFabrica> TipoEmpleadoFabrica { get; set; }
        public virtual DbSet<TipoEmpleadoSucursal> TipoEmpleadoSucursal { get; set; }
        public virtual DbSet<TipoPago> TipoPago { get; set; }
        public virtual DbSet<Venta> Venta { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_AutomovilDelete(Nullable<int> idAutomovil)
        {
            var idAutomovilParameter = idAutomovil.HasValue ?
                new ObjectParameter("IdAutomovil", idAutomovil) :
                new ObjectParameter("IdAutomovil", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AutomovilDelete", idAutomovilParameter);
        }
    
        public virtual ObjectResult<sp_AutomovilInsert_Result> sp_AutomovilInsert(Nullable<int> idTipoAutomovil, Nullable<int> idModelo, Nullable<int> idTipoCombustible, Nullable<decimal> precio)
        {
            var idTipoAutomovilParameter = idTipoAutomovil.HasValue ?
                new ObjectParameter("IdTipoAutomovil", idTipoAutomovil) :
                new ObjectParameter("IdTipoAutomovil", typeof(int));
    
            var idModeloParameter = idModelo.HasValue ?
                new ObjectParameter("IdModelo", idModelo) :
                new ObjectParameter("IdModelo", typeof(int));
    
            var idTipoCombustibleParameter = idTipoCombustible.HasValue ?
                new ObjectParameter("IdTipoCombustible", idTipoCombustible) :
                new ObjectParameter("IdTipoCombustible", typeof(int));
    
            var precioParameter = precio.HasValue ?
                new ObjectParameter("Precio", precio) :
                new ObjectParameter("Precio", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AutomovilInsert_Result>("sp_AutomovilInsert", idTipoAutomovilParameter, idModeloParameter, idTipoCombustibleParameter, precioParameter);
        }
    
        public virtual ObjectResult<sp_AutomovilSelect_Result> sp_AutomovilSelect(Nullable<int> idAutomovil)
        {
            var idAutomovilParameter = idAutomovil.HasValue ?
                new ObjectParameter("IdAutomovil", idAutomovil) :
                new ObjectParameter("IdAutomovil", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AutomovilSelect_Result>("sp_AutomovilSelect", idAutomovilParameter);
        }
    
        public virtual ObjectResult<sp_AutomovilUpdate_Result> sp_AutomovilUpdate(Nullable<int> idAutomovil, Nullable<int> idTipoAutomovil, Nullable<int> idModelo, Nullable<int> idTipoCombustible, Nullable<decimal> precio)
        {
            var idAutomovilParameter = idAutomovil.HasValue ?
                new ObjectParameter("IdAutomovil", idAutomovil) :
                new ObjectParameter("IdAutomovil", typeof(int));
    
            var idTipoAutomovilParameter = idTipoAutomovil.HasValue ?
                new ObjectParameter("IdTipoAutomovil", idTipoAutomovil) :
                new ObjectParameter("IdTipoAutomovil", typeof(int));
    
            var idModeloParameter = idModelo.HasValue ?
                new ObjectParameter("IdModelo", idModelo) :
                new ObjectParameter("IdModelo", typeof(int));
    
            var idTipoCombustibleParameter = idTipoCombustible.HasValue ?
                new ObjectParameter("IdTipoCombustible", idTipoCombustible) :
                new ObjectParameter("IdTipoCombustible", typeof(int));
    
            var precioParameter = precio.HasValue ?
                new ObjectParameter("Precio", precio) :
                new ObjectParameter("Precio", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AutomovilUpdate_Result>("sp_AutomovilUpdate", idAutomovilParameter, idTipoAutomovilParameter, idModeloParameter, idTipoCombustibleParameter, precioParameter);
        }
    
        public virtual int sp_ClienteDelete(Nullable<int> idCliente)
        {
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("IdCliente", idCliente) :
                new ObjectParameter("IdCliente", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ClienteDelete", idClienteParameter);
        }
    
        public virtual ObjectResult<sp_ClienteInsert_Result> sp_ClienteInsert(Nullable<int> idPais, Nullable<int> idProvincia, Nullable<int> idCanton, string señas, string nombre, string cedula, string telefono, string email)
        {
            var idPaisParameter = idPais.HasValue ?
                new ObjectParameter("idPais", idPais) :
                new ObjectParameter("idPais", typeof(int));
    
            var idProvinciaParameter = idProvincia.HasValue ?
                new ObjectParameter("idProvincia", idProvincia) :
                new ObjectParameter("idProvincia", typeof(int));
    
            var idCantonParameter = idCanton.HasValue ?
                new ObjectParameter("idCanton", idCanton) :
                new ObjectParameter("idCanton", typeof(int));
    
            var señasParameter = señas != null ?
                new ObjectParameter("señas", señas) :
                new ObjectParameter("señas", typeof(string));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var cedulaParameter = cedula != null ?
                new ObjectParameter("Cedula", cedula) :
                new ObjectParameter("Cedula", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ClienteInsert_Result>("sp_ClienteInsert", idPaisParameter, idProvinciaParameter, idCantonParameter, señasParameter, nombreParameter, cedulaParameter, telefonoParameter, emailParameter);
        }
    
        public virtual ObjectResult<sp_ClienteSelect_Result> sp_ClienteSelect(Nullable<int> idCliente)
        {
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("IdCliente", idCliente) :
                new ObjectParameter("IdCliente", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ClienteSelect_Result>("sp_ClienteSelect", idClienteParameter);
        }
    
        public virtual ObjectResult<sp_ClienteUpdate_Result> sp_ClienteUpdate(Nullable<int> idCliente, Nullable<int> idDireccion, string nombre, string cedula, string telefono, string email)
        {
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("IdCliente", idCliente) :
                new ObjectParameter("IdCliente", typeof(int));
    
            var idDireccionParameter = idDireccion.HasValue ?
                new ObjectParameter("IdDireccion", idDireccion) :
                new ObjectParameter("IdDireccion", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var cedulaParameter = cedula != null ?
                new ObjectParameter("Cedula", cedula) :
                new ObjectParameter("Cedula", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ClienteUpdate_Result>("sp_ClienteUpdate", idClienteParameter, idDireccionParameter, nombreParameter, cedulaParameter, telefonoParameter, emailParameter);
        }
    
        public virtual ObjectResult<sp_consultar_productos_Result> sp_consultar_productos()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_consultar_productos_Result>("sp_consultar_productos");
        }
    
        public virtual ObjectResult<sp_consultar_ventas_Result> sp_consultar_ventas(Nullable<int> sucursal, Nullable<int> tipo, Nullable<int> pais, Nullable<System.DateTime> fecha_inicio, Nullable<System.DateTime> fecha_fin)
        {
            var sucursalParameter = sucursal.HasValue ?
                new ObjectParameter("sucursal", sucursal) :
                new ObjectParameter("sucursal", typeof(int));
    
            var tipoParameter = tipo.HasValue ?
                new ObjectParameter("tipo", tipo) :
                new ObjectParameter("tipo", typeof(int));
    
            var paisParameter = pais.HasValue ?
                new ObjectParameter("pais", pais) :
                new ObjectParameter("pais", typeof(int));
    
            var fecha_inicioParameter = fecha_inicio.HasValue ?
                new ObjectParameter("fecha_inicio", fecha_inicio) :
                new ObjectParameter("fecha_inicio", typeof(System.DateTime));
    
            var fecha_finParameter = fecha_fin.HasValue ?
                new ObjectParameter("fecha_fin", fecha_fin) :
                new ObjectParameter("fecha_fin", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_consultar_ventas_Result>("sp_consultar_ventas", sucursalParameter, tipoParameter, paisParameter, fecha_inicioParameter, fecha_finParameter);
        }
    
        public virtual ObjectResult<sp_consultar_ventasPorTipoPago_Result> sp_consultar_ventasPorTipoPago(Nullable<int> sucursal, Nullable<int> tipo, Nullable<System.DateTime> fecha_inicio, Nullable<System.DateTime> fecha_fin)
        {
            var sucursalParameter = sucursal.HasValue ?
                new ObjectParameter("sucursal", sucursal) :
                new ObjectParameter("sucursal", typeof(int));
    
            var tipoParameter = tipo.HasValue ?
                new ObjectParameter("tipo", tipo) :
                new ObjectParameter("tipo", typeof(int));
    
            var fecha_inicioParameter = fecha_inicio.HasValue ?
                new ObjectParameter("fecha_inicio", fecha_inicio) :
                new ObjectParameter("fecha_inicio", typeof(System.DateTime));
    
            var fecha_finParameter = fecha_fin.HasValue ?
                new ObjectParameter("fecha_fin", fecha_fin) :
                new ObjectParameter("fecha_fin", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_consultar_ventasPorTipoPago_Result>("sp_consultar_ventasPorTipoPago", sucursalParameter, tipoParameter, fecha_inicioParameter, fecha_finParameter);
        }
    
        public virtual ObjectResult<sp_ConsultarProducto_Result> sp_ConsultarProducto(Nullable<int> idCarro, Nullable<int> idCliente)
        {
            var idCarroParameter = idCarro.HasValue ?
                new ObjectParameter("idCarro", idCarro) :
                new ObjectParameter("idCarro", typeof(int));
    
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("idCliente", idCliente) :
                new ObjectParameter("idCliente", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ConsultarProducto_Result>("sp_ConsultarProducto", idCarroParameter, idClienteParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_EmpleadoDelete(Nullable<int> idEmpleado)
        {
            var idEmpleadoParameter = idEmpleado.HasValue ?
                new ObjectParameter("IdEmpleado", idEmpleado) :
                new ObjectParameter("IdEmpleado", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_EmpleadoDelete", idEmpleadoParameter);
        }
    
        public virtual ObjectResult<sp_EmpleadoInsert_Result> sp_EmpleadoInsert(Nullable<int> idTipoEmpleadoSucursal, Nullable<int> idSucursal, Nullable<int> idDireccion, string nombre, string cedula, string telefono, string email)
        {
            var idTipoEmpleadoSucursalParameter = idTipoEmpleadoSucursal.HasValue ?
                new ObjectParameter("IdTipoEmpleadoSucursal", idTipoEmpleadoSucursal) :
                new ObjectParameter("IdTipoEmpleadoSucursal", typeof(int));
    
            var idSucursalParameter = idSucursal.HasValue ?
                new ObjectParameter("IdSucursal", idSucursal) :
                new ObjectParameter("IdSucursal", typeof(int));
    
            var idDireccionParameter = idDireccion.HasValue ?
                new ObjectParameter("IdDireccion", idDireccion) :
                new ObjectParameter("IdDireccion", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var cedulaParameter = cedula != null ?
                new ObjectParameter("Cedula", cedula) :
                new ObjectParameter("Cedula", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_EmpleadoInsert_Result>("sp_EmpleadoInsert", idTipoEmpleadoSucursalParameter, idSucursalParameter, idDireccionParameter, nombreParameter, cedulaParameter, telefonoParameter, emailParameter);
        }
    
        public virtual ObjectResult<sp_EmpleadoSelect_Result> sp_EmpleadoSelect(Nullable<int> idEmpleado)
        {
            var idEmpleadoParameter = idEmpleado.HasValue ?
                new ObjectParameter("IdEmpleado", idEmpleado) :
                new ObjectParameter("IdEmpleado", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_EmpleadoSelect_Result>("sp_EmpleadoSelect", idEmpleadoParameter);
        }
    
        public virtual ObjectResult<sp_EmpleadoUpdate_Result> sp_EmpleadoUpdate(Nullable<int> idEmpleado, Nullable<int> idTipoEmpleadoSucursal, Nullable<int> idSucursal, Nullable<int> idDireccion, string nombre, string cedula, string telefono, string email)
        {
            var idEmpleadoParameter = idEmpleado.HasValue ?
                new ObjectParameter("IdEmpleado", idEmpleado) :
                new ObjectParameter("IdEmpleado", typeof(int));
    
            var idTipoEmpleadoSucursalParameter = idTipoEmpleadoSucursal.HasValue ?
                new ObjectParameter("IdTipoEmpleadoSucursal", idTipoEmpleadoSucursal) :
                new ObjectParameter("IdTipoEmpleadoSucursal", typeof(int));
    
            var idSucursalParameter = idSucursal.HasValue ?
                new ObjectParameter("IdSucursal", idSucursal) :
                new ObjectParameter("IdSucursal", typeof(int));
    
            var idDireccionParameter = idDireccion.HasValue ?
                new ObjectParameter("IdDireccion", idDireccion) :
                new ObjectParameter("IdDireccion", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var cedulaParameter = cedula != null ?
                new ObjectParameter("Cedula", cedula) :
                new ObjectParameter("Cedula", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_EmpleadoUpdate_Result>("sp_EmpleadoUpdate", idEmpleadoParameter, idTipoEmpleadoSucursalParameter, idSucursalParameter, idDireccionParameter, nombreParameter, cedulaParameter, telefonoParameter, emailParameter);
        }
    
        public virtual int sp_ExtraDelete(Nullable<int> idExtra)
        {
            var idExtraParameter = idExtra.HasValue ?
                new ObjectParameter("IdExtra", idExtra) :
                new ObjectParameter("IdExtra", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ExtraDelete", idExtraParameter);
        }
    
        public virtual ObjectResult<sp_ExtraInsert_Result> sp_ExtraInsert(string nombre, Nullable<decimal> precioUnitario)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var precioUnitarioParameter = precioUnitario.HasValue ?
                new ObjectParameter("PrecioUnitario", precioUnitario) :
                new ObjectParameter("PrecioUnitario", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ExtraInsert_Result>("sp_ExtraInsert", nombreParameter, precioUnitarioParameter);
        }
    
        public virtual ObjectResult<sp_ExtraSelect_Result> sp_ExtraSelect(Nullable<int> idExtra)
        {
            var idExtraParameter = idExtra.HasValue ?
                new ObjectParameter("IdExtra", idExtra) :
                new ObjectParameter("IdExtra", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ExtraSelect_Result>("sp_ExtraSelect", idExtraParameter);
        }
    
        public virtual ObjectResult<sp_ExtraUpdate_Result> sp_ExtraUpdate(Nullable<int> idExtra, string nombre, Nullable<decimal> precioUnitario)
        {
            var idExtraParameter = idExtra.HasValue ?
                new ObjectParameter("IdExtra", idExtra) :
                new ObjectParameter("IdExtra", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var precioUnitarioParameter = precioUnitario.HasValue ?
                new ObjectParameter("PrecioUnitario", precioUnitario) :
                new ObjectParameter("PrecioUnitario", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ExtraUpdate_Result>("sp_ExtraUpdate", idExtraParameter, nombreParameter, precioUnitarioParameter);
        }
    
        public virtual int sp_FabricaDelete(Nullable<int> idFabrica)
        {
            var idFabricaParameter = idFabrica.HasValue ?
                new ObjectParameter("IdFabrica", idFabrica) :
                new ObjectParameter("IdFabrica", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_FabricaDelete", idFabricaParameter);
        }
    
        public virtual ObjectResult<sp_FabricaInsert_Result> sp_FabricaInsert(Nullable<int> idDireccion, Nullable<int> idGerente, string nombre)
        {
            var idDireccionParameter = idDireccion.HasValue ?
                new ObjectParameter("IdDireccion", idDireccion) :
                new ObjectParameter("IdDireccion", typeof(int));
    
            var idGerenteParameter = idGerente.HasValue ?
                new ObjectParameter("IdGerente", idGerente) :
                new ObjectParameter("IdGerente", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_FabricaInsert_Result>("sp_FabricaInsert", idDireccionParameter, idGerenteParameter, nombreParameter);
        }
    
        public virtual ObjectResult<sp_FabricaSelect_Result> sp_FabricaSelect(Nullable<int> idFabrica)
        {
            var idFabricaParameter = idFabrica.HasValue ?
                new ObjectParameter("IdFabrica", idFabrica) :
                new ObjectParameter("IdFabrica", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_FabricaSelect_Result>("sp_FabricaSelect", idFabricaParameter);
        }
    
        public virtual ObjectResult<sp_FabricaUpdate_Result> sp_FabricaUpdate(Nullable<int> idFabrica, Nullable<int> idDireccion, Nullable<int> idGerente, string nombre)
        {
            var idFabricaParameter = idFabrica.HasValue ?
                new ObjectParameter("IdFabrica", idFabrica) :
                new ObjectParameter("IdFabrica", typeof(int));
    
            var idDireccionParameter = idDireccion.HasValue ?
                new ObjectParameter("IdDireccion", idDireccion) :
                new ObjectParameter("IdDireccion", typeof(int));
    
            var idGerenteParameter = idGerente.HasValue ?
                new ObjectParameter("IdGerente", idGerente) :
                new ObjectParameter("IdGerente", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_FabricaUpdate_Result>("sp_FabricaUpdate", idFabricaParameter, idDireccionParameter, idGerenteParameter, nombreParameter);
        }
    
        public virtual int sp_FacturaDelete(Nullable<int> idFactura)
        {
            var idFacturaParameter = idFactura.HasValue ?
                new ObjectParameter("IdFactura", idFactura) :
                new ObjectParameter("IdFactura", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_FacturaDelete", idFacturaParameter);
        }
    
        public virtual ObjectResult<sp_FacturaInsert_Result> sp_FacturaInsert(Nullable<int> idEmpleadoSucursal, Nullable<int> idSucursal, Nullable<int> idCliente, Nullable<decimal> monto, Nullable<double> descuento, Nullable<System.DateTime> fecha)
        {
            var idEmpleadoSucursalParameter = idEmpleadoSucursal.HasValue ?
                new ObjectParameter("IdEmpleadoSucursal", idEmpleadoSucursal) :
                new ObjectParameter("IdEmpleadoSucursal", typeof(int));
    
            var idSucursalParameter = idSucursal.HasValue ?
                new ObjectParameter("IdSucursal", idSucursal) :
                new ObjectParameter("IdSucursal", typeof(int));
    
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("IdCliente", idCliente) :
                new ObjectParameter("IdCliente", typeof(int));
    
            var montoParameter = monto.HasValue ?
                new ObjectParameter("Monto", monto) :
                new ObjectParameter("Monto", typeof(decimal));
    
            var descuentoParameter = descuento.HasValue ?
                new ObjectParameter("Descuento", descuento) :
                new ObjectParameter("Descuento", typeof(double));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("Fecha", fecha) :
                new ObjectParameter("Fecha", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_FacturaInsert_Result>("sp_FacturaInsert", idEmpleadoSucursalParameter, idSucursalParameter, idClienteParameter, montoParameter, descuentoParameter, fechaParameter);
        }
    
        public virtual ObjectResult<sp_FacturaSelect_Result> sp_FacturaSelect(Nullable<int> idFactura)
        {
            var idFacturaParameter = idFactura.HasValue ?
                new ObjectParameter("IdFactura", idFactura) :
                new ObjectParameter("IdFactura", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_FacturaSelect_Result>("sp_FacturaSelect", idFacturaParameter);
        }
    
        public virtual ObjectResult<sp_FacturaUpdate_Result> sp_FacturaUpdate(Nullable<int> idFactura, Nullable<int> idEmpleadoSucursal, Nullable<int> idSucursal, Nullable<int> idCliente, Nullable<decimal> monto, Nullable<double> descuento, Nullable<System.DateTime> fecha)
        {
            var idFacturaParameter = idFactura.HasValue ?
                new ObjectParameter("IdFactura", idFactura) :
                new ObjectParameter("IdFactura", typeof(int));
    
            var idEmpleadoSucursalParameter = idEmpleadoSucursal.HasValue ?
                new ObjectParameter("IdEmpleadoSucursal", idEmpleadoSucursal) :
                new ObjectParameter("IdEmpleadoSucursal", typeof(int));
    
            var idSucursalParameter = idSucursal.HasValue ?
                new ObjectParameter("IdSucursal", idSucursal) :
                new ObjectParameter("IdSucursal", typeof(int));
    
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("IdCliente", idCliente) :
                new ObjectParameter("IdCliente", typeof(int));
    
            var montoParameter = monto.HasValue ?
                new ObjectParameter("Monto", monto) :
                new ObjectParameter("Monto", typeof(decimal));
    
            var descuentoParameter = descuento.HasValue ?
                new ObjectParameter("Descuento", descuento) :
                new ObjectParameter("Descuento", typeof(double));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("Fecha", fecha) :
                new ObjectParameter("Fecha", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_FacturaUpdate_Result>("sp_FacturaUpdate", idFacturaParameter, idEmpleadoSucursalParameter, idSucursalParameter, idClienteParameter, montoParameter, descuentoParameter, fechaParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_login_Result> sp_login(string correo, string password)
        {
            var correoParameter = correo != null ?
                new ObjectParameter("correo", correo) :
                new ObjectParameter("correo", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_login_Result>("sp_login", correoParameter, passwordParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_SucursalDelete(Nullable<int> idSucursal)
        {
            var idSucursalParameter = idSucursal.HasValue ?
                new ObjectParameter("IdSucursal", idSucursal) :
                new ObjectParameter("IdSucursal", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SucursalDelete", idSucursalParameter);
        }
    
        public virtual ObjectResult<sp_SucursalInsert_Result> sp_SucursalInsert(Nullable<int> idDireccion, Nullable<int> idGerente, string nombre, Nullable<System.TimeSpan> horaApertura, Nullable<System.TimeSpan> horaCierre)
        {
            var idDireccionParameter = idDireccion.HasValue ?
                new ObjectParameter("IdDireccion", idDireccion) :
                new ObjectParameter("IdDireccion", typeof(int));
    
            var idGerenteParameter = idGerente.HasValue ?
                new ObjectParameter("IdGerente", idGerente) :
                new ObjectParameter("IdGerente", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var horaAperturaParameter = horaApertura.HasValue ?
                new ObjectParameter("HoraApertura", horaApertura) :
                new ObjectParameter("HoraApertura", typeof(System.TimeSpan));
    
            var horaCierreParameter = horaCierre.HasValue ?
                new ObjectParameter("HoraCierre", horaCierre) :
                new ObjectParameter("HoraCierre", typeof(System.TimeSpan));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SucursalInsert_Result>("sp_SucursalInsert", idDireccionParameter, idGerenteParameter, nombreParameter, horaAperturaParameter, horaCierreParameter);
        }
    
        public virtual ObjectResult<sp_SucursalSelect_Result> sp_SucursalSelect(Nullable<int> idSucursal)
        {
            var idSucursalParameter = idSucursal.HasValue ?
                new ObjectParameter("IdSucursal", idSucursal) :
                new ObjectParameter("IdSucursal", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SucursalSelect_Result>("sp_SucursalSelect", idSucursalParameter);
        }
    
        public virtual ObjectResult<sp_SucursalUpdate_Result> sp_SucursalUpdate(Nullable<int> idSucursal, Nullable<int> idDireccion, Nullable<int> idGerente, string nombre, Nullable<System.TimeSpan> horaApertura, Nullable<System.TimeSpan> horaCierre)
        {
            var idSucursalParameter = idSucursal.HasValue ?
                new ObjectParameter("IdSucursal", idSucursal) :
                new ObjectParameter("IdSucursal", typeof(int));
    
            var idDireccionParameter = idDireccion.HasValue ?
                new ObjectParameter("IdDireccion", idDireccion) :
                new ObjectParameter("IdDireccion", typeof(int));
    
            var idGerenteParameter = idGerente.HasValue ?
                new ObjectParameter("IdGerente", idGerente) :
                new ObjectParameter("IdGerente", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var horaAperturaParameter = horaApertura.HasValue ?
                new ObjectParameter("HoraApertura", horaApertura) :
                new ObjectParameter("HoraApertura", typeof(System.TimeSpan));
    
            var horaCierreParameter = horaCierre.HasValue ?
                new ObjectParameter("HoraCierre", horaCierre) :
                new ObjectParameter("HoraCierre", typeof(System.TimeSpan));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SucursalUpdate_Result>("sp_SucursalUpdate", idSucursalParameter, idDireccionParameter, idGerenteParameter, nombreParameter, horaAperturaParameter, horaCierreParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int sp_VentaDelete(Nullable<int> idVenta)
        {
            var idVentaParameter = idVenta.HasValue ?
                new ObjectParameter("IdVenta", idVenta) :
                new ObjectParameter("IdVenta", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_VentaDelete", idVentaParameter);
        }
    
        public virtual ObjectResult<sp_VentaInsert_Result> sp_VentaInsert(Nullable<int> idSucursal, Nullable<int> idAutomovil, Nullable<int> idCliente, Nullable<int> idTipoPago, Nullable<decimal> monto, Nullable<System.DateTime> fecha)
        {
            var idSucursalParameter = idSucursal.HasValue ?
                new ObjectParameter("IdSucursal", idSucursal) :
                new ObjectParameter("IdSucursal", typeof(int));
    
            var idAutomovilParameter = idAutomovil.HasValue ?
                new ObjectParameter("IdAutomovil", idAutomovil) :
                new ObjectParameter("IdAutomovil", typeof(int));
    
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("IdCliente", idCliente) :
                new ObjectParameter("IdCliente", typeof(int));
    
            var idTipoPagoParameter = idTipoPago.HasValue ?
                new ObjectParameter("IdTipoPago", idTipoPago) :
                new ObjectParameter("IdTipoPago", typeof(int));
    
            var montoParameter = monto.HasValue ?
                new ObjectParameter("Monto", monto) :
                new ObjectParameter("Monto", typeof(decimal));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("Fecha", fecha) :
                new ObjectParameter("Fecha", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_VentaInsert_Result>("sp_VentaInsert", idSucursalParameter, idAutomovilParameter, idClienteParameter, idTipoPagoParameter, montoParameter, fechaParameter);
        }
    
        public virtual ObjectResult<sp_VentaSelect_Result> sp_VentaSelect(Nullable<int> idVenta)
        {
            var idVentaParameter = idVenta.HasValue ?
                new ObjectParameter("IdVenta", idVenta) :
                new ObjectParameter("IdVenta", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_VentaSelect_Result>("sp_VentaSelect", idVentaParameter);
        }
    
        public virtual ObjectResult<sp_VentaUpdate_Result> sp_VentaUpdate(Nullable<int> idVenta, Nullable<int> idSucursal, Nullable<int> idAutomovil, Nullable<int> idCliente, Nullable<int> idTipoPago, Nullable<decimal> monto, Nullable<System.DateTime> fecha)
        {
            var idVentaParameter = idVenta.HasValue ?
                new ObjectParameter("IdVenta", idVenta) :
                new ObjectParameter("IdVenta", typeof(int));
    
            var idSucursalParameter = idSucursal.HasValue ?
                new ObjectParameter("IdSucursal", idSucursal) :
                new ObjectParameter("IdSucursal", typeof(int));
    
            var idAutomovilParameter = idAutomovil.HasValue ?
                new ObjectParameter("IdAutomovil", idAutomovil) :
                new ObjectParameter("IdAutomovil", typeof(int));
    
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("IdCliente", idCliente) :
                new ObjectParameter("IdCliente", typeof(int));
    
            var idTipoPagoParameter = idTipoPago.HasValue ?
                new ObjectParameter("IdTipoPago", idTipoPago) :
                new ObjectParameter("IdTipoPago", typeof(int));
    
            var montoParameter = monto.HasValue ?
                new ObjectParameter("Monto", monto) :
                new ObjectParameter("Monto", typeof(decimal));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("Fecha", fecha) :
                new ObjectParameter("Fecha", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_VentaUpdate_Result>("sp_VentaUpdate", idVentaParameter, idSucursalParameter, idAutomovilParameter, idClienteParameter, idTipoPagoParameter, montoParameter, fechaParameter);
        }
    }
}
